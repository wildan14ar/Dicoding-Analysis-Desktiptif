# -*- coding: utf-8 -*-
"""Dicoding Predictive Analytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yU3XeBL_CK8QdMzRfAJD82Nt9KSECYHe

# Proyek Pertama : Predictive Analytics


Dataset link: https://www.kaggle.com/datasets/rajattomar132/payment-date-dataset

Kumpulan data faktur berisi informasi pembayaran sebelumnya dan perilaku berbagai pembeli. Berdasarkan pola pembayaran sebelumnya, model ML akan memprediksi tanggal pembayaran yang akan dilakukan oleh pelanggan untuk faktur. Model tersebut juga akan memprediksi kategori umur faktur berdasarkan tanggal pembayaran yang diprediksi.

## Import Library and Dataset

### Library
"""

# Import libraries yang dibutuhkan
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_curve, auc

"""### Dataset"""

url = "https://docs.google.com/spreadsheets/d/14bbC33OrmPFUh4z-Nwtg1Eahv2ofx-BC2omyN063oSY/export?format=csv"
df = pd.read_csv(url)
df.head()

df.info()

df.describe()

"""## Data Cleaning & Preprocessing

### Konversi kolom tanggal ke format datetime (jika diperlukan)
"""

# Daftar kolom tanggal yang akan dikonversi
date_columns = ['due_in_date', 'posting_date', 'baseline_create_date', 'document_create_date.1', 'document_create_date']

# Loop untuk mengkonversi setiap kolom tanggal ke tipe data datetime
for col in date_columns:
    try:
        df[col] = pd.to_datetime(df[col])
    except ValueError:
        print(f"Gagal mengkonversi kolom '{col}' ke datetime. Periksa format tanggal.")
    except Exception as e:
        print(f"Terjadi error saat mengkonversi kolom '{col}': {e}")

"""### Drop Comlumn Missing Value"""

if df['area_business'].isnull().all():
    df.drop(columns=['area_business'], inplace=True)
    print("\nKolom 'area_business' dihapus karena seluruh nilainya null.")

"""## Exploratory Data Analysis (EDA)

### Genaral Information
"""

print("Dataset Information:")
df.info()

print("Statistik Deskriptif:")
df.describe()

print("\nDistribusi Nilai Unik untuk Kolom Kategorikal:")
for col in df.select_dtypes(include='object').columns:
    print(f"{col}: {df[col].nunique()} unique values")

"""### Distribution"""

plt.figure(figsize=(15,3))
sns.histplot(df['total_open_amount'], bins=50, kde=True, color='skyblue')
plt.title('Distribusi Total Open Amount')
plt.xlabel('Total Open Amount')
plt.ylabel('Frekuensi')
plt.show()

plt.figure(figsize=(8,4))
sns.countplot(data=df, x='invoice_currency', palette='Set2')
plt.title('Distribusi Invoice Currency')
plt.xlabel('Invoice Currency')
plt.ylabel('Jumlah Transaksi')
plt.show()

plt.figure(figsize=(20,4))
sns.countplot(data=df, x='cust_payment_terms', order=df['cust_payment_terms'].value_counts().index, palette='Set3')
plt.title('Distribusi Customer Payment Terms')
plt.xlabel('Customer Payment Terms')
plt.ylabel('Jumlah Transaksi')
plt.xticks(rotation=45)
plt.show()

"""### Trend Waktu"""

df_time = df.copy()
df_time.set_index('posting_date', inplace=True)
# Hitung jumlah transaksi per hari
daily_transactions = df_time.resample('D').size()

plt.figure(figsize=(15,4))
daily_transactions.plot(color='green')
plt.title('Jumlah Transaksi per Hari')
plt.xlabel('Tanggal')
plt.ylabel('Jumlah Transaksi')
plt.show()

daily_total = df_time['total_open_amount'].resample('D').sum()

plt.figure(figsize=(15,4))
daily_total.plot(color='purple')
plt.title('Total Open Amount per Hari')
plt.xlabel('Tanggal')
plt.ylabel('Total Open Amount')
plt.show()

"""### Heatmap"""

plt.figure(figsize=(5,4))
numeric_cols = df.select_dtypes(include=['int64', 'float64']).columns
corr_matrix = df[numeric_cols].corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Heatmap Korelasi Variabel Numerik')
plt.show()

"""## Modeling

### Menentukan Fitur dan Target
"""

# Misalnya, kita gunakan beberapa fitur yang dianggap relevan dan mengabaikan kolom yang tidak diperlukan.
# Target: 'isOpen'
target = 'isOpen'
# Contoh fitur yang akan digunakan; sesuaikan dengan pemahaman data Anda.
features = ['business_code', 'buisness_year', 'doc_id', 'total_open_amount',
            'invoice_currency', 'document type', 'cust_payment_terms']

# Menentukan Fitur Numerik dan Kategorikal
categorical_features = ['business_code', 'invoice_currency', 'document type', 'cust_payment_terms']
numeric_features = [col for col in features if col not in categorical_features]
print("Fitur Numerik:", numeric_features)
print("Fitur Kategorikal:", categorical_features)

"""### Preprocessing Pipeline"""

numeric_transformer = Pipeline(steps=[
    ('scaler', StandardScaler())
])
categorical_transformer = Pipeline(steps=[
    ('onehot', OneHotEncoder(handle_unknown='ignore'))
])
preprocessor = ColumnTransformer(transformers=[
    ('num', numeric_transformer, numeric_features),
    ('cat', categorical_transformer, categorical_features)
])

"""### Split Data ke Training dan Testing"""

X = df[features]
y = df[target]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
print("Shape X_train:", X_train.shape)
print("Shape X_test:", X_test.shape)
print("Shape y_train:", y_train.shape)
print("Shape y_test:", y_test.shape)

"""### Model Logistic Regression"""

# --- Model Baseline: Logistic Regression ---
clf_lr = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('classifier', LogisticRegression(max_iter=1000))
])
clf_lr.fit(X_train, y_train)
y_pred_lr = clf_lr.predict(X_test)

print("=== Logistic Regression ===")
print("Classification Report:")
print(classification_report(y_test, y_pred_lr))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_lr))

# Plot ROC Curve untuk Logistic Regression
y_pred_proba_lr = clf_lr.predict_proba(X_test)[:, 1]
fpr_lr, tpr_lr, thresholds_lr = roc_curve(y_test, y_pred_proba_lr)
roc_auc_lr = auc(fpr_lr, tpr_lr)

plt.figure(figsize=(6, 4))
plt.plot(fpr_lr, tpr_lr, color='darkorange', lw=2, label='ROC curve (AUC = %0.2f)' % roc_auc_lr)
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve - Logistic Regression')
plt.legend(loc="lower right")
plt.show()

"""### Model Random Forest"""

# --- Model Alternatif: Random Forest ---
clf_rf = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('classifier', RandomForestClassifier(random_state=42))
])
clf_rf.fit(X_train, y_train)
y_pred_rf = clf_rf.predict(X_test)

print("\n=== Random Forest ===")
print("Classification Report:")
print(classification_report(y_test, y_pred_rf))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_rf))

# Plot ROC Curve untuk Random Forest
y_pred_proba_rf = clf_rf.predict_proba(X_test)[:, 1]
fpr_rf, tpr_rf, thresholds_rf = roc_curve(y_test, y_pred_proba_rf)
roc_auc_rf = auc(fpr_rf, tpr_rf)

plt.figure(figsize=(6, 4))
plt.plot(fpr_rf, tpr_rf, color='green', lw=2, label='ROC curve (AUC = %0.2f)' % roc_auc_rf)
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve - Random Forest')
plt.legend(loc="lower right")
plt.show()

"""### Hyperparameter Tuning pada Random Forest dengan GridSearchCV"""

param_grid = {
    'classifier__n_estimators': [50, 100, 200],
    'classifier__max_depth': [None, 10, 20],
    'classifier__min_samples_split': [2, 5, 10]
}

grid_search = GridSearchCV(clf_rf, param_grid, cv=5, scoring='f1', n_jobs=-1)
grid_search.fit(X_train, y_train)

print("\n=== Hasil Hyperparameter Tuning ===")
print("Best parameters found: ", grid_search.best_params_)

best_rf = grid_search.best_estimator_
y_pred_best_rf = best_rf.predict(X_test)
print("\n=== Best Random Forest ===")
print("Classification Report:")
print(classification_report(y_test, y_pred_best_rf))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_best_rf))

# Plot ROC Curve untuk model terbaik
y_pred_proba_best_rf = best_rf.predict_proba(X_test)[:, 1]
fpr_best, tpr_best, thresholds_best = roc_curve(y_test, y_pred_proba_best_rf)
roc_auc_best = auc(fpr_best, tpr_best)

plt.figure(figsize=(6, 4))
plt.plot(fpr_best, tpr_best, color='purple', lw=2, label='ROC curve (AUC = %0.2f)' % roc_auc_best)
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('ROC Curve - Best Random Forest')
plt.legend(loc="lower right")
plt.show()